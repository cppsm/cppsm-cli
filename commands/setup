#!/bin/bash -e

# shellcheck source=.settings
. "${BASH_SOURCE%/*}/.settings"

if [ "$#" -ne 0 ] || [ ! -f CMakeLists.txt ]; then
  CMD="${0##*/}"
  cat << EOF
Usage: [option=value ...] $CMD

Options:

  CMAKE_BUILD_TYPE=Debug|Release

  CTEST_OUTPUT_ON_FAILURE=1|0

  CC=cc|gcc|clang|...
  CXX=c++|g++|clang++|...

  CLEAN=0|1

  COVERAGE=0|1

Run $CMD in a directory containing CMakeLists.txt.
EOF
  exit 1
fi

CMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE:-Debug}"

if (set +x && [ -z "$CMAKE_HELP" ]); then
  CMAKE_HELP="$(cmake --help)"
fi

cmake-help-contains() {
  (set +x && [[ "$CMAKE_HELP" =~ $1 ]])
}

COVERAGE="${COVERAGE:-0}"

INIT_CMD=(cmake)
if cmake-help-contains "Visual Studio" && [ -z "$CXX" ]; then
  DIR=".build"
else
  DIR=".build.$CMAKE_BUILD_TYPE${CXX:+.}$CXX"
  INIT_CMD+=("-DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE")

  if cmake-help-contains "MSYS Makefiles"; then
    INIT_CMD+=("-G" "MSYS Makefiles")
    export CMAKE_MAKE_PROGRAM="make"
  fi

  if [ "$COVERAGE" = 1 ]; then
    INIT_CMD+=("-DCOVERAGE=ON")
  fi
fi
INIT_CMD+=(..)

export WATCH_CMD=(fswatch --one-per-batch --recursive)
if [[ "$OSTYPE" =~ linux-gnu|msys|cygwin ]]; then
  # The default monitor notifies on read accesses...
  WATCH_CMD+=(--monitor poll_monitor '--latency=5')
fi

export CTEST_OUTPUT_ON_FAILURE="${CTEST_OUTPUT_ON_FAILURE:-1}"

if command -v nice > /dev/null; then NICE="nice"; else NICE=""; fi

if [ -z "$NUMBER_OF_PROCESSORS" ]; then
  NUMBER_OF_PROCESSORS=$(getconf _NPROCESSORS_ONLN || echo 2)
fi

BUILD_PARALLEL="${BUILD_PARALLEL:-$NUMBER_OF_PROCESSORS}"
TEST_PARALLEL="${TEST_PARALLEL:-$NUMBER_OF_PROCESSORS}"

export BUILD_CMD="$NICE cmake --build . --config $CMAKE_BUILD_TYPE --parallel $BUILD_PARALLEL"
export TEST_CMD="$BUILD_CMD && $NICE ctest --build-config $CMAKE_BUILD_TYPE --parallel $TEST_PARALLEL"

CLEAN="${CLEAN:-0}"
if [ "$CLEAN" = 1 ]; then
  rm -rf "$DIR"
fi

mkdir -p "$DIR" && cd "$_"
"${INIT_CMD[@]}"

WATCH_CMD+=(../*)
