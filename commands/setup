#!/bin/bash -e

# shellcheck source=.settings
. "${BASH_SOURCE%/*}/.settings"

if [ "$#" -ne 0 ] || [ ! -f CMakeLists.txt ]; then
  CMD="${0##*/}"
  cat << EOF
Usage: [option=value ...] $CMD

Options:

  CMAKE_BUILD_TYPE=Debug|Release
  CMAKE_GENERATOR=|...

  CTEST_OUTPUT_ON_FAILURE=1|0

  CC=cc|gcc|clang|...
  CXX=c++|g++|clang++|...

  CLEAN=0|1

  COVERAGE=0|1

  NUMBER_OF_PROCESSORS=1|2|...
  N_PARALLEL_BUILD=1|2|...
  N_PARALLEL_TEST=1|2|...

Run $CMD in a directory containing CMakeLists.txt.
EOF
  exit 1
fi

# Meta -------------------------------------------------------------------------

if (set +x && [ -z "$CMAKE_HELP" ]); then
  CMAKE_HELP="$(cmake --help)"
fi

cmake-help-contains() {
  (set +x && [[ "$CMAKE_HELP" =~ $1 ]])
}

# Generate ---------------------------------------------------------------------

BUILD_DIR=".build"

CMAKE_BUILD_TYPE="${CMAKE_BUILD_TYPE:-Debug}"

GENERATE_CMD=(cmake "-Werror=dev" "-Werror=deprecated")
if ! cmake-help-contains "Visual Studio" || [ -n "$CXX" ]; then
  COVERAGE="${COVERAGE:-0}"
  if [ "$COVERAGE" = 1 ]; then
    BUILD_DIR="$BUILD_DIR.coverage"
    GENERATE_CMD+=("-DCOVERAGE=ON")
  fi

  BUILD_DIR="$BUILD_DIR.$CMAKE_BUILD_TYPE${CXX:+.}$CXX"
  GENERATE_CMD+=("-DCMAKE_BUILD_TYPE=$CMAKE_BUILD_TYPE")

  if cmake-help-contains "MSYS Makefiles" && [ -z "$CMAKE_GENERATOR" ] ; then
    export CMAKE_GENERATOR="MSYS Makefiles"
  fi
fi
if [ -n "$CMAKE_GENERATOR" ]; then
  BUILD_DIR="$BUILD_DIR.${CMAKE_GENERATOR// /_}"
  GENERATE_CMD+=("-G" "$CMAKE_GENERATOR")

  if [ "$CMAKE_GENERATOR" = "MSYS Makefiles" ]; then
    export CMAKE_MAKE_PROGRAM="make"
  fi
fi
GENERATE_CMD+=(..)

# Clean

CLEAN="${CLEAN:-0}"
if [ "$CLEAN" = 1 ]; then
  rm -rf "$BUILD_DIR"
fi

# Generate

mkdir -p "$BUILD_DIR" && cd "$_"
"${GENERATE_CMD[@]}"

# Build and Test ---------------------------------------------------------------

export CTEST_OUTPUT_ON_FAILURE="${CTEST_OUTPUT_ON_FAILURE:-1}"

N_PARALLEL_BUILD="${N_PARALLEL_BUILD:-$NUMBER_OF_PROCESSORS}"
N_PARALLEL_TEST="${N_PARALLEL_TEST:-$NUMBER_OF_PROCESSORS}"

export BUILD_CMD=()
export TEST_CMD=()
if command -v nice > /dev/null; then
  BUILD_CMD+=(nice)
  TEST_CMD+=(nice)
fi
BUILD_CMD+=(cmake --build . --config "$CMAKE_BUILD_TYPE" --parallel "$N_PARALLEL_BUILD" --)
TEST_CMD+=(ctest --build-config "$CMAKE_BUILD_TYPE" --parallel "$N_PARALLEL_TEST")

if cmake-help-contains "Visual Studio" && [ -z "$CXX" ]; then
  if [ "$QUIET" != 0 ]; then
    MSBUILD_VERBOSITY="${MSBUILD_VERBOSITY:-QUIET}"
  fi
  if [ -n "$MSBUILD_VERBOSITY" ]; then
    BUILD_CMD+=("/VERBOSITY:$MSBUILD_VERBOSITY")
  fi
fi

# Watch ------------------------------------------------------------------------

export WATCH_CMD=(fswatch --one-per-batch --recursive)

if [[ "$OSTYPE" =~ ^(linux-gnu|msys|cygwin)$ ]]; then
  # The default monitor notifies on read accesses...
  WATCH_CMD+=(--monitor poll_monitor '--latency=5')
fi

WATCH_CMD+=(../*)
