#!/bin/bash -e

# shellcheck source=commands/.settings
. "${BASH_SOURCE%/*}/commands/.settings"

if [ "$TRAVIS_OS_NAME" = linux ]; then
  TMP="/tmp/"
elif [ "$TRAVIS_OS_NAME" = osx ]; then
  TMP="$TMPDIR"
fi

LOCK="${TMP}install.lock"

if [ "$TRAVIS_OS_NAME" = linux ]; then
  locked() { flock "$LOCK" "$@"; }
elif [ "$TRAVIS_OS_NAME" = osx ]; then
  locked() {
    while ! shlock -f "$LOCK" -p $$ ; do sleep 0.25; done
    local EXIT=0
    "$@" || EXIT=$?
    rm -f "$LOCK"
    return $EXIT
  }
elif [ "$TRAVIS_OS_NAME" = windows ]; then
  locked() { "$@"; }
fi

finish() {
  if [ -f "$TMP.$1" ]; then
    local EXIT=0
    tail -n 1000 -f "$TMP.$1" &
    local PID=$!
    if ! wait "${!1}"; then
      EXIT=$?
    fi
    kill -9 $PID
    rm -f "$TMP.$1"
    return $EXIT
  fi
}

concurrently() {
  local VAR="$1"
  shift
  "$@" >> "$TMP.$VAR" 2>&1 &
  local PID=$!
  export "$VAR"=$PID
  if [ "$INSTALL_WAIT" = 1 ]; then finish "$VAR"; fi
}

ignore() {
  "$@" || true
}

folded() {
  FOLD=$((FOLD+1))
  echo -e "travis_fold:start:cppsm.$FOLD\033[33;1m$1\033[0m"
  travis_time_start
  shift
  echo "$@"
  "$@"
  travis_time_finish
  echo -e "\ntravis_fold:end:cppsm.$FOLD\r"
}

folded ... concurrently GIT_UPDATE_PID git submodule update --init --depth 1 --jobs "$N_PARALLEL_UPDATE"

if [ "$TRAVIS_OS_NAME" = linux ]; then
  folded ... concurrently LIBSTD_INSTALL_PID locked bash -c 'sudo -E apt-add-repository -y ppa:ubuntu-toolchain-r/test && sudo -E apt-get -yq update && sudo -E apt-get -yq --no-install-suggests --no-install-recommends install libstdc++-8-dev'
  folded ... concurrently GCC_INSTALL_PID locked sudo -E apt-get -yq --no-install-suggests --no-install-recommends install g++-8
elif [ "$TRAVIS_OS_NAME" = osx ]; then
  [ "$CODECOV" != 1 ] || HOMEBREW_NO_INSTALL_CLEANUP=1 folded ... concurrently LCOV_INSTALL_PID locked brew install lcov
  [ "$FORMAT_CHECK" = 0 ] || HOMEBREW_NO_INSTALL_CLEANUP=1 folded ... concurrently FORMAT_INSTALL_PID locked brew install prettier clang-format
elif [ "$TRAVIS_OS_NAME" = windows ]; then
  folded ... concurrently MAKE_INSTALL_PID choco install make
  folded ... concurrently VC2019_INSTALL_PID ignore choco install visualstudio2019-workload-vctools
fi

export CMAKE_HELP
CMAKE_HELP="$(cmake --help)"

if ! command -v cppsm > /dev/null; then
  export PATH="$PWD/.cppsm/.cli/bin:$PATH"
fi

folded ... finish GIT_UPDATE_PID

for CONFIG in Debug Release; do
  if [ "$TRAVIS_OS_NAME" = linux ]; then
    folded ... finish LIBSTD_INSTALL_PID
    CMAKE_BUILD_TYPE=$CONFIG CC=clang CXX=clang++ folded "Clang $CONFIG" cppsm test
    folded ... finish GCC_INSTALL_PID
    CMAKE_BUILD_TYPE=$CONFIG CC=gcc-8 CXX=g++-8 folded "GCC $CONFIG" cppsm test
  elif [ "$TRAVIS_OS_NAME" = windows ]; then
    CMAKE_BUILD_TYPE=$CONFIG CC='' CXX='' folded "VC2017 $CONFIG" cppsm test
    folded ... finish MAKE_INSTALL_PID
    CMAKE_BUILD_TYPE=$CONFIG CC="gcc" CXX="g++" folded "GCC $CONFIG" cppsm test
  elif [ "$TRAVIS_OS_NAME" = osx ]; then
    CMAKE_BUILD_TYPE=$CONFIG CC='' CXX='' CMAKE_GENERATOR=Xcode folded "Clang $CONFIG" cppsm test
    CMAKE_BUILD_TYPE=$CONFIG CC=gcc-8 CXX=g++-8 folded "GCC $CONFIG" cppsm test
  else
    echo "Unsupported OS: $TRAVIS_OS_NAME"
    exit 1
  fi
done

if [ "$TRAVIS_OS_NAME" = windows ]; then
  folded ... finish VC2019_INSTALL_PID
  folded ... choco upgrade -y cmake.install

  for CONFIG in Debug Release; do
    CMAKE_BUILD_TYPE=$CONFIG CC='' CXX='' CMAKE_GENERATOR="Visual Studio 16 2019" folded "VC2019 $CONFIG" cppsm test
  done

  # shellcheck disable=2009,2046
  kill -9 $(ps | grep -o "^ *[0-9]\\+  *$$ " | sed -e 's#^ *##g' -e 's# .*##g') 2>/dev/null || true
fi

code-coverage() {
  COVERAGE=1 cppsm test
  local COVERAGE_INFO="${TMP}coverage.info"
  lcov --capture --directory . --output-file "$COVERAGE_INFO"
  lcov --remove "$COVERAGE_INFO" '/Applications/*' --output-file "$COVERAGE_INFO"
  bash <(curl -s https://codecov.io/bash) -f "$COVERAGE_INFO"
}

format-check() {
  cppsm format
  if [[ $(git status --porcelain) ]] ; then
    git status
    git diff
    exit 1
  fi
}

if [ "$TRAVIS_OS_NAME" = osx ]; then
  [ "$CODECOV" != 1 ] || folded ... finish LCOV_INSTALL_PID
  [ "$CODECOV" != 1 ] || folded 'Code coverage' code-coverage

  [ "$FORMAT_CHECK" = 0 ] || folded ... finish FORMAT_INSTALL_PID
  [ "$FORMAT_CHECK" = 0 ] || folded 'Format check' format-check
fi
