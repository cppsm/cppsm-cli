#!/bin/bash -e

if [ "$XTRACE" = 1 ]; then set -x; fi

if [ "$TRAVIS_OS_NAME" = "linux" ]; then
  TMP="/tmp"
elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
  TMP="$TMPDIR"
fi

LOCK="$TMP/install.lock"
OUT="$TMP/install.out"

if [ "$TRAVIS_OS_NAME" = "linux" ]; then
  locked() { flock "$LOCK" "$@"; }
elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
  locked() {
    while ! shlock -f "$LOCK" -p $$ ; do sleep 0.25; done
    local EXIT=0
    "$@" || EXIT=$?
    rm -f "$LOCK"
    return $EXIT
  }
elif [ "$TRAVIS_OS_NAME" = "windows" ]; then
  locked() { "$@"; }
fi

finish() {
  local EXIT=0
  if ! wait "$1"; then
    EXIT=$?
    cat "$OUT"
  fi
  return $EXIT
}

concurrently() {
  local VAR="$1"
  shift
  locked "$@" >> "$OUT" 2>&1 &
  PID=$!
  export "$VAR"=$PID
  if [ "$INSTALL_WAIT" = 1 ]; then finish $PID; fi
}

folded() {
  FOLD=$((FOLD+1))
  echo -e "travis_fold:start:cppsm.$FOLD\033[33;1m$1\033[0m"
  travis_time_start
  shift
  "$@"
  travis_time_finish
  echo -e "\ntravis_fold:end:cppsm.$FOLD\r"
}

folded ... concurrently GIT_UPDATE_PID git submodule update --init --depth 1

if [ "$TRAVIS_OS_NAME" = "linux" ]; then
  folded ... concurrently LIBSTD_INSTALL_PID bash -c "sudo -E apt-add-repository -y ppa:ubuntu-toolchain-r/test && sudo -E apt-get -yq update && sudo -E apt-get -yq --no-install-suggests --no-install-recommends install libstdc++-8-dev"
  folded ... concurrently GCC_INSTALL_PID sudo -E apt-get -yq --no-install-suggests --no-install-recommends install g++-8
elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
  folded ... concurrently LCOV_INSTALL_PID brew install lcov
  folded ... concurrently FORMAT_INSTALL_PID brew install prettier clang-format
elif [ "$TRAVIS_OS_NAME" = "windows" ]; then
  folded ... concurrently MAKE_INSTALL_PID choco install make
fi

export CMAKE_HELP
CMAKE_HELP="$(cmake --help)"

if ! command -v cppsm > /dev/null; then
  export PATH="$PWD/.cppsm/.cli/bin:$PATH"
fi

folded ... finish "$GIT_UPDATE_PID"

for CONFIG in Debug Release; do
  export CMAKE_BUILD_TYPE=$CONFIG
  if [ "$TRAVIS_OS_NAME" = "linux" ]; then
    folded ... finish "$LIBSTD_INSTALL_PID"
    CC="clang" CXX="clang++" folded "Clang $CONFIG" cppsm test
    folded ... finish "$GCC_INSTALL_PID"
    CC="gcc-8" CXX="g++-8" folded "GCC $CONFIG" cppsm test
  elif [ "$TRAVIS_OS_NAME" = "windows" ]; then
    CC="" CXX="" folded "VC $CONFIG" cppsm test
    folded ... finish "$MAKE_INSTALL_PID"
    CC="gcc" CXX="g++" folded "GCC $CONFIG" cppsm test
  elif [ "$TRAVIS_OS_NAME" = "osx" ]; then
    CC="clang" CXX="clang++" folded "Clang $CONFIG" cppsm test
    CC="gcc-8" CXX="g++-8" folded "GCC $CONFIG" cppsm test
  else
    echo "Unsupported OS: $TRAVIS_OS_NAME"
    exit 1
  fi
done

code-coverage() {
  CLEAN=1 COVERAGE=1 cppsm test
  lcov --capture --directory . --output-file coverage.info
  lcov --remove coverage.info '/Applications/*' --output-file coverage.info
  bash <(curl -s https://codecov.io/bash) -f coverage.info
  rm -f coverage.info
}

format-check() {
  cppsm format
  if [[ $(git status --porcelain) ]] ; then
    git status
    git diff
    exit 1
  fi
}

if [ "$TRAVIS_OS_NAME" = "osx" ]; then
  if [ -n "$CODECOV" ]; then
    folded ... finish "$LCOV_INSTALL_PID"
  fi
  folded "Code coverage" code-coverage
  folded ... finish "$FORMAT_INSTALL_PID"
  folded "Format check" format-check
fi

folded ... cat "$OUT"
